---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import SideBar from "../components/SideBar.astro";
import { ClientRouter } from "astro:transitions";

import { SITE_TITLE, SITE_DESCRIPTION, TRANSITION_API } from "../config";

const {
  image,
  title = SITE_TITLE,
  description = SITE_DESCRIPTION,
  includeSidebar = true,
  sideBarActiveItemID,
  ogType,
} = Astro.props;
---

<!doctype html>
<html lang="en" data-theme="dracula">
  <head>
    <BaseHead title={title} description={description} image={image} ogType={ogType} />
    {TRANSITION_API && <ClientRouter />}
  </head>

  <body>
    <div class="bg-base-100 drawer lg:drawer-open">
      <input id="my-drawer" type="checkbox" class="drawer-toggle" />
      <div class="drawer-content bg-base-100">
        <Header title={SITE_TITLE} />
        <div class="md:flex md:justify-center">
          <main class="p-6 pt-10 lg:max-w-[900px] max-w-[100vw]">
            <slot />
          </main>
        </div>
        <Footer />
      </div>
      {includeSidebar && <SideBar sideBarActiveItemID={sideBarActiveItemID} />}
    </div>
    <!-- THEME SCRIPT -->
    <script>
      const setTheme = (theme) => {
        document.documentElement.setAttribute("data-theme", theme);
        localStorage.setItem("theme", theme);
      };

      const saved = localStorage.getItem("theme");
      if (saved) document.documentElement.setAttribute("data-theme", saved);

      document.querySelectorAll(".theme-btn").forEach(btn => {
        btn.addEventListener("click", () => {
          setTheme(btn.getAttribute("data-theme"));
        });
      });
    </script>
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
<script>
  function blogFilter() {
    return {
      sortOrder: 'newest',
      selectedTag: '',
      originalPosts: JSON.parse(`<?= JSON.stringify(page.data.map(p => ({
        title: p.data.title,
        heroImage: p.data.heroImage,
        description: p.data.description,
        badge: p.data.badge ?? null,
        tags: p.data.tags ?? [],
        slug: p.slug,
        pubDate: new Date(p.data.pubDate),
      }))) ?>`),
      get availableTags() {
        const tags = new Set()
        this.originalPosts.forEach(p => {
          if (Array.isArray(p.tags)) {
            p.tags.forEach(tag => tags.add(tag))
          }
        })
        return Array.from(tags).sort()
      },
      get filteredPosts() {
        let result = this.originalPosts
        if (this.selectedTag !== '') {
          result = result.filter(p =>
            Array.isArray(p.tags) && p.tags.includes(this.selectedTag)
          )
        }
        return result.sort((a, b) =>
          this.sortOrder === 'newest'
            ? b.pubDate - a.pubDate
            : a.pubDate - b.pubDate
        )
      }
    }
  }
</script>

  </body>
</html>
